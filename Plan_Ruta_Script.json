{"files":[{"id":"375ab76f-75e2-49d3-bd74-c77516918d17","name":"MainUnaClase","type":"server_js","source":"function main() {\n\n// ID del documento avance en Google Sheets\n//Emaus\n//A var id \u003d  1tvrEdlQsEbMSJ_EPtbMKK6WpAccPaD3U0tafSMtDoqM\n//B var id \u003d \"1xnZBqWd19TfUVXikodheDrjqBGorQQPuUseQoYwSvkE\";\n//C var id \u003d 1I52FOnVRSYPSpp_dSMp0r0Y4LQ29sNyI7kyg-HH8EP0\n//Velaz\n//A 1Rn5aiJgoKefjg-VcHTAaz9VoTx1PR9w05qe3Y_cQTiA\n// B 1WkVpp8EMf4CyNa_vSh4ZNHpB1a349lZYyYb7kToQNAY\n// C 1SZ9E3ZOIPEd7py5Kb82JWnHsQVJmL0SAvu1LDzWvxsM\nvar id \u003d \"1I52FOnVRSYPSpp_dSMp0r0Y4LQ29sNyI7kyg-HH8EP0\";\n\n// Nombre de la hoja (pestaña de la sesión) que tiene el avance\nvar nombre \u003d \"04-02\";\n// Hoja de Avance\nvar avance \u003d SpreadsheetApp.openById(id).getSheetByName(nombre).getDataRange().getValues();\n\n// ID del documento Planes de Ruta de la clase, aquí quedará escrito el Plan de Ruta\nvar id2 \u003d \"1yBQ__okEeygUGB-3vS8QBY_bnLIYWpMWZP-ysqqBJmE\";\n// Nombre de la pestaña del documento de Planes de Ruta donde quedará escrito el Plan de Ruta automático\nvar nombrePs \u003d \"Estudiantes\";\n// ID del documento Planes de Sesión en PFA\nvar id3 \u003d \"1FLCZy-xeFck_GM-DKxaRyjlHS8R-m70DuFTSAHy3xEQ\";\n// Nombre de la pestaña del documento de Planes de Sesión donde quedará escrito el Plan de Ruta automático\nvar nombrePs3 \u003d \"Estudiantes EM C\";\n// Hoja de plan de ruta de la clase\nvar plan \u003d SpreadsheetApp.openById(id2).getSheetByName(nombrePs).getDataRange().getValues();\nvar hojaPlan \u003d SpreadsheetApp.openById(id2).getSheetByName(nombrePs);\n// Hoja de plan de sesión en pfa\nvar planSesion \u003d SpreadsheetApp.openById(id3).getSheetByName(nombrePs3).getDataRange().getValues();\nvar hojaPlanSesion \u003d SpreadsheetApp.openById(id3).getSheetByName(nombrePs3);\n  \n// Tercer argumento: fila hoja avance hasta donde se quiere evaluar (Nº fila - 1)\n// Este tercer argumento hay que ponerlo para que la evaluación sea hasta la próxima sesión \n// Cuarto argumento: fila del ultimo alumno en la hoja de planes de Ruta\n var ultimaFila\u003dhojaPlan.getLastRow();\nplanSesionPrimeraClase(avance, plan, 162, ultimaFila, hojaPlan,planSesion,hojaPlanSesion); //80 , 101\n   \n}"},{"id":"0e15e5d3-4d8e-4f3d-9df7-49a1a3d54bc4","name":"Util","type":"server_js","source":"function obtenerNombre(hoja, indice_fila, indice_columna){\n  \n  var fila \u003d hoja[indice_fila];\n  var valorCelda \u003d fila[indice_columna];\n  \n  Logger.log(\u0027valorcelda OBTENER NOMBRE \u0027+ valorCelda);\n\n  var nombre \u003d valorCelda.split(\"-\");\n  \n  return nombre[1];\n  \n}\n\n// Retorna numero de columna en la que se ubica un alumno dado el nombre\n// en la hoja de avance.\nfunction buscarAlumno(hoja, nombre) {\n\n    //Fila donde estan ubicados los nombres en la hoja de avance.\n    var n \u003d 4;\n\n    var fila \u003d hoja[n];\n   \n    for (k \u003d 2; k \u003c\u003d fila.length-1; k++) {\n         \n        var valorCelda \u003d String(fila[k]);\n        Logger.log(\u0027buscarAlumno \u0027 + valorCelda);\n        //[Codigo , Nombre del alumno]\n        var codigoNombre \u003d valorCelda.split(\"-\");\n      \n        var nombre2 \u003d codigoNombre[1];\n        Logger.log(\u0027nombre \u0027 + nombre);\n        if (nombre2.toUpperCase() \u003d\u003d nombre.toUpperCase()) {\n            return k;\n        }\n    }\n    return 0;\n}\n\nfunction insertarColumnas(hojaPlanPFA,fecha1) {\n\n  var range;    \n  \n  hojaPlanPFA.insertColumns(6, 4);\n  range \u003d hojaPlanPFA.getRange(3, 6);\n  range.setValue(\"Plan de Ruta al \" + fecha1);\n  range \u003d hojaPlanPFA.getRange(3, 7);\n  range.setValue(\"NVG / CND\");\n  range \u003d hojaPlanPFA.getRange(3, 8);\n  range.setValue(\"Plan de Sesión al \" + fecha1);\n  range \u003d hojaPlanPFA.getRange(3, 9);\n  range.setValue(\"OBSERVACIONES DE LA SESIÓN del \" + fecha1);\n\n  return 1;\n}\n\n\n\n\n\n\n\n\n\n\n"},{"id":"7154163e-795a-4cca-9bf9-69cb455a2382","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Caracas\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [{\n      \"userSymbol\": \"Classroom\",\n      \"serviceId\": \"classroom\",\n      \"version\": \"v1\"\n    }],\n    \"libraries\": [{\n      \"userSymbol\": \"OAuth2\",\n      \"libraryId\": \"1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF\",\n      \"version\": \"29\"\n    }]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\"\n}"},{"id":"c538c895-299c-4381-9da7-bf0f4193b4a3","name":"PlanPrimeraClase","type":"server_js","source":"// Construir Plan de Sesión\n// Parametro etapa_reto: Numero de fila de la hoja Avance que corresponde\n// a la etapa y reto hasta la que se quiere planificar.\n// Parametro ultimoAlumno: Numero de fila de la hoja Planes de Sesion\n// correspondiente al ultimo alumno a evaluar .\nfunction planSesionPrimeraClase(hojaAvance, hojaPlanSesion, etapa_reto, ultimoAlumno, hojaPlan,planPFA,hojaPlanPFA) {\n\n    // Numero de fila donde comienza a registrarse el avance\n    var filaAvance \u003d 5; // No modificar\n    // Numero de fila donde comienzan a registrarse los alumnos\n    var filaAlumnos \u003d 4; // No modificar\n    var alumnos \u003d hojaAvance[filaAlumnos];\n    var fecha1 \u003d \"07/02\";\n    var fecha2 \u003d \"11/02\";\n\n    // Insertar dos columnas en plan de ruta\n    hojaPlan.insertColumns(6, 2);\n    var range \u003d hojaPlan.getRange(2, 6);\n    range.setValue(\"Plan de Ruta al \" + fecha1);\n    range \u003d hojaPlan.getRange(2, 7);\n    range.setValue(\"Navegante / Conductor al \" + fecha1);\n\n    // Insertar ocho columnas en plan de sesión PFA\n      //insertarColumnas(hojaPlanPFA,fecha1);\n      insertarColumnas(hojaPlanPFA,fecha2);\n          \n    // Si se desea modificar donde comienza a leer en la hoja de plan\n    // de ruta, modificar el indice \u0027 i \u0027 en el ciclo a continuación.\n    // Recorriendo todos los alumnos de la hoja Plan Sesion.\n    // Indice \u003d Nº Fila - 1\n    for (i \u003d 2; i \u003c\u003d ultimoAlumno - 1; i++) {\n       var listaNotTried \u003d [];\n       var etapaActual \u003d hojaAvance[filaAvance][0];\n       var retoActual \u003d hojaAvance[filaAvance][1];\n       var conjuntoRetos \u003d []; // Todos los retos a realizar de una etapa\n       var todoListo \u003d 1;\n       var verdeClaro \u003d 0;\n       var atrasado \u003d 0;\n       var Etapa \u003d \"\";\n       var anterior \u003d 0;\n       var rio \u003d \"\";\n      \n        //var nombreAlumno \u003d concatenarNombre(hojaPlanRuta, i, 5);\n        var nombreAlumno \u003d obtenerNombre(hojaPlanSesion, i, 4);\n        var ubicacionAlumno \u003d buscarAlumno(hojaAvance, nombreAlumno);\n\n        if (ubicacionAlumno \u003d\u003d 0) {\n            Logger.log(\u0027ubicacion alumno \u0027 + ubicacionAlumno);\n            continue;\n        }\n        else {\n\n            for (j \u003d filaAvance; j \u003c\u003d etapa_reto + 1; j++) {\n\n                //if (etapaActual !\u003d hojaAvance[j][0]) {\n                    if (conjuntoRetos.length \u003e 0) {\n                        conjuntoRetos.unshift(etapaActual);\n                        listaNotTried.push(conjuntoRetos);\n                        conjuntoRetos \u003d [];\n                    }\n                    etapaActual \u003d hojaAvance[j][0];\n                    //Logger.log(\u0027etapa actual \u0027 + etapaActual);\n                //}\n                if (hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link not tried\" || hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link attempted\"\n                || hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link attempted paired\" || hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link passed\" \n                || hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link passed paired\" ) {\n                    //Logger.log(\u0027falta \u0027 + nombreAlumno + \" resultado \" + hojaAvance[j][ubicacionAlumno] + \" fila columna \" + j + \" \" + ubicacionAlumno); \n                    todoListo \u003d 0; \n                    conjuntoRetos.push(hojaAvance[j][1]);\n                    if (j \u003c etapa_reto + 1)\n                        atrasado \u003d 1;\n                    //Logger.log(\u0027retos \u0027 + hojaAvance[j][1]);\n                }\n                if (hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link passed\" || hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link passed paired\") {\n                    verdeClaro \u003d 1; \n                }\n            }\n\n            var plan \u003d \"\";\n            var words \u003d nombreAlumno.split(\u0027 \u0027);\n            if (listaNotTried.length \u003e\u003d 1)\n            {\n                for (k \u003d 0; k \u003c listaNotTried.length; k +\u003d 1) {\n                //for (k \u003d listaNotTried.length - 1; k \u003c listaNotTried.length; k +\u003d 1) {\n                  Etapa \u003d listaNotTried[k][0];\n                  plan \u003d plan.concat(\"Etapa \" + listaNotTried[k][0] + \" Reto: \");\n                  for (l \u003d 1; l \u003c listaNotTried[k].length; l +\u003d 1) {\n                  //for (l \u003d listaNotTried[k].length - 1; l \u003c listaNotTried[k].length ; l +\u003d 1) { \n                     plan \u003d plan.concat(listaNotTried[k][l] + \", \");\n                  }\n                }\n                //Logger.log(\"nombre \"+ words[0]);\n                plan \u003d words[0] + \", en CODE.ORG completa todos los retos hasta: \" + plan;\n            }\n\n            //Logger.log(\u0027nombre \u0027 + nombreAlumno + \" plan\" + plan + \"XX\" );\n            if (verdeClaro \u003d\u003d 1) {\n                 if (plan \u003d\u003d \"\")\n                   plan \u003d words[0]  + \", Vuelve a hacer los retos en VERDE CLARO. \";\n                 else\n                   plan \u003d plan + \" Vuelve a hacer los retos en VERDE CLARO. \";\n            }\n            if ((todoListo \u003d\u003d 1 || plan.length \u003d\u003d 0) \u0026\u0026 verdeClaro \u003d\u003d 0 ) {\n              plan \u003d words[0] + \",  si tu compañero/a no está igual que tu, ayúdalo/a a avanzar siendo  tu NAVEGANTE\";\n              todoListo \u003d 1;\n              //Logger.log(\u0027plan \u0027 + plan);  \n            }\n            \n            //Escribir en plan de ruta PES\n            var filaRegistroAvance \u003d i + 1;\n            var fr \u003d filaRegistroAvance.toString();\n            //Esta es la columna en Gloogle Sheets en donde se escribe el Plan de Ruta\n            var columnaRegistroAvance \u003d \"F\";\n            //plan\n            var celda \u003d columnaRegistroAvance.concat(fr);\n            var cell \u003d hojaPlan.getRange(celda);\n            cell.setValue(plan);\n            if ((todoListo \u003d\u003d 1 || plan.length \u003d\u003d 0) \u0026\u0026 verdeClaro \u003d\u003d 0 ) {\n                cell.setBackgroundColor(\"#C0C0C0\"); \n            }\n            //conductor-navegante\n            var rango \u003d hojaPlan.getRange(i+1, 9);\n            var valor \u003d rango.getValue();\n            rango \u003d hojaPlan.getRange(i+1, 7);\n            if ((todoListo \u003d\u003d 1 || plan.length \u003d\u003d 0) \u0026\u0026 verdeClaro \u003d\u003d 0 ) {\n              valor \u003d \"NVG\";\n              rango.setValue(\"NVG\");\n            }\n            else {\n              if (valor \u003d\u003d \"CND\") {\n                rango.setValue(\"NVG\");\n                valor \u003d \"NVG\";\n              }\n              else {\n                rango.setValue(\"CND\");\n                valor \u003d \"CND\";\n              }\n            }\n            //Escribir en plan de sesión PFA\n            filaRegistroAvance \u003d i + 2;\n            fr \u003d filaRegistroAvance.toString();\n            //Esta es la columna en Gloogle Shhets en donde se escribe el Plan de Ruta\n            columnaRegistroAvance \u003d \"J\";\n            //plan de ruta\n            celda \u003d columnaRegistroAvance.concat(fr);\n            cell \u003d hojaPlanPFA.getRange(celda);\n            cell.setValue(plan);\n            if ((todoListo \u003d\u003d 1 || plan.length \u003d\u003d 0) \u0026\u0026 verdeClaro \u003d\u003d 0 ) {\n                cell.setBackgroundColor(\"#C0C0C0\"); \n            }\n            //Esta es la columna en Gloogle Shhets en donde se escribe el Plan de Sesión\n            columnaRegistroAvance \u003d \"L\";\n            var planSesion \u003d \"\";\n            etapaActual \u003d hojaAvance[etapa_reto][0];\n            retoActual \u003d hojaAvance[etapa_reto][1];\n            if (verdeClaro \u003d\u003d 1) {\n               planSesion \u003d (\"* Mostrarle código de los retos en VERDE CLARO\");\n            }\n            if (atrasado \u003d\u003d 1) {\n              planSesion \u003d planSesion + (String.fromCharCode(10) + \"* Insistirle que complete los retos en blanco de las etapas ANTERIORES o iguales a la etapa:  \" + Etapa + \n                                         String.fromCharCode(10) + \"* Ayudarle a llegar al RIO (Reto Real Objetivo) que es la etapa \" + etapaActual + \" reto \" + retoActual );\n              rio \u003d \"Etapa \" +  etapaActual + \" reto \" + retoActual;                         \n            }\n            if ((todoListo \u003d\u003d 1 || plan.length \u003d\u003d 0) \u0026\u0026 verdeClaro \u003d\u003d 0 ) {\n              planSesion \u003d planSesion + (String.fromCharCode(10) + \"* Decirle que sea Navegante y ayude avanzar a su compañero si está atrasado o a otro equipo, según lo que dice el Plan de Ruta\" );\n            }            \n            celda \u003d columnaRegistroAvance.concat(fr);\n            cell \u003d hojaPlanPFA.getRange(celda);\n            cell.setValue(planSesion);\n          \n            //conductor-navegante\n            rango \u003d hojaPlanPFA.getRange(i+2, 11);\n            rango.setValue(valor);\n            //sheetTest[0].getRange(i, 1).setValue( plan );\n        }\n    }\n    range \u003d hojaPlan.getRange(1, 5);\n    range.setValue(rio);\n}\n\n"},{"id":"4152bc82-271d-4459-88a9-4bd8eaa785df","name":"PlanSegundaClase","type":"server_js","source":"// Construir Plan de Sesión\n// Parametro etapa_reto: Numero de fila de la hoja Avance que corresponde\n// a la etapa y reto hasta la que se quiere planificar.\n// Parametro ultimoAlumno: Numero de fila de la hoja Planes de Sesion\n// correspondiente al ultimo alumno a evaluar .\nfunction planSesionSegundaClase(hojaAvance, hojaPlanSesion, etapa_reto, ultimoAlumno, hojaPlan) {\n\n    // Numero de fila donde comienza a registrarse el avance\n    var filaAvance \u003d 5;\n    // Numero de fila donde comienzan a registrarse los alumnos\n    var filaAlumnos \u003d 4;\n\n    //var alumnos \u003d hojaAvance[filaAlumnos];\n\n    // Recorriendo todos los alumnos de la hoja Plan Sesion\n    for (i \u003d 1; i \u003c\u003d ultimoAlumno - 1; i++) {\n\n        //var nombreAlumno \u003d concatenarNombre(hojaPlanSesion, i, 5);\n        var nombreAlumno \u003d obtenerNombre(hojaPlanSesion, i, 5);\n        var ubicacionAlumno \u003d buscarAlumno(hojaAvance, nombreAlumno);\n\n        if (ubicacionAlumno \u003d\u003d 0) {\n            continue;\n        }\n        else {\n            var listaNotTried \u003d [];\n            var listaAttemptedPassed \u003d [];\n            var etapaActual \u003d hojaAvance[filaAvance][0];\n            var RetosPorRealizar \u003d []; // Todos los retos a realizar de una etapa\n            var RetosPorTerminarMejorar \u003d [];\n\n            for (j \u003d filaAvance; j \u003c\u003d etapa_reto + 1; j++) {\n\n                if (etapaActual !\u003d hojaAvance[j][0] || j \u003d\u003d etapa_reto + 1 ) {\n                    if (RetosPorRealizar.length \u003e 0) {\n                        RetosPorRealizar.unshift(etapaActual);\n                        listaNotTried.push(RetosPorRealizar);\n                        RetosPorRealizar \u003d [];\n                    }\n\n                    if (RetosPorTerminarMejorar.length \u003e 0) {\n                        RetosPorTerminarMejorar.unshift(etapaActual);\n                        listaAttemptedPassed.push(RetosPorTerminarMejorar);\n                        RetosPorTerminarMejorar \u003d [];\n                    }\n                    etapaActual \u003d hojaAvance[j][0];\n                }\n                if (hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link not_tried\") {\n                    RetosPorRealizar.push(hojaAvance[j][1]);\n                }\n                else if (hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link attempted\" || hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link passed\" ||\n                  hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link attempted paired\" || hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link passed paired\") {\n                    RetosPorTerminarMejorar.push(hojaAvance[j][1]);\n                }\n            }\n\n            var plan \u003d \"\";\n\n            if (listaNotTried.length \u003e\u003d 1)\n            {\n              for (k \u003d 0; k \u003c listaNotTried.length; k +\u003d 1) {\n                  plan \u003d plan.concat(\"Etapa \" + listaNotTried[k][0] + \" Retos: \");\n                  for (l \u003d 1; l \u003c listaNotTried[k].length; l +\u003d 1) {\n                      plan \u003d plan.concat(listaNotTried[k][l] + \", \");\n                  }\n              }\n              plan \u003d nombreAlumno + \" Cumbres por alcanzar: \" + plan;\n            }\n            \n            if (listaAttemptedPassed.length \u003e\u003d 1)\n            {\n              plan \u003d plan.concat(\" Cumbres por enfrentar de nuevo:  \");\n\n              for (k \u003d 0; k \u003c listaAttemptedPassed.length; k +\u003d 1) {\n                  plan \u003d plan.concat(\"Etapa \" + listaAttemptedPassed[k][0] + \" Retos: \");\n                  for (l \u003d 1; l \u003c listaAttemptedPassed[k].length; l +\u003d 1) {\n                      plan \u003d plan.concat(listaAttemptedPassed[k][l] + \", \");\n                  }\n              }\n            }\n            var filaRegistroAvance \u003d i + 1;\n            var fr \u003d filaRegistroAvance.toString();\n            //Esta es la columna en Gloogle Shhets en donde se escribe el Plan de Ruta\n            var columnaRegistroAvance \u003d \"S\";\n            var celda \u003d columnaRegistroAvance.concat(fr);\n\n            var cell \u003d hojaPlan.getRange(celda);\n            cell.setValue(plan);\n            //sheetTest[0].getRange(i, 1).setValue( plan );\n\n        }\n    }\n}\n\n"},{"id":"9815a342-50fe-48c2-ba72-eaa914bdab9e","name":"PlanSesionGeneral","type":"server_js","source":"// Construir Plan de Sesión\n// Parametro etapa_reto: Numero de fila de la hoja Avance que corresponde\n// a la etapa y reto hasta la que se quiere planificar.\n// Parametro ultimoAlumno: Numero de fila de la hoja Planes de Sesion\n// correspondiente al ultimo alumno a evaluar .\nfunction planSesionGeneral(hojaAvance, hojaAvance2, hojaPlanSesion, etapa_reto, ultimoAlumno, hojaPlan) {\n\n    /*\n    Información para Google Classroom\n    */\n    var Curso \u003d \"PES 2018-2019\";\n    var CursoId \u003d BuscarIdCurso(Curso);\n    var estudiantes \u003d Classroom.Courses.Students.list(CursoId).students;\n    var profesores \u003d Classroom.Courses.Teachers.list(CursoId).teachers;\n    var idProfesor \u003d BuscarIdProfesor(\"Simon Esperanza\", profesores);\n    var idValeria \u003d BuscarIdProfesor(\"Valeria Leon\", profesores);\n\n    // Numero de fila donde comienza a registrarse el avance\n    var filaAvance \u003d 5;\n    // Numero de fila donde comienzan a registrarse los alumnos\n    var filaAlumnos \u003d 4;\n\n    //var alumnos \u003d hojaAvance[filaAlumnos];\n\n    // Recorriendo todos los alumnos de la hoja Plan Sesion\n    for (i \u003d 1; i \u003c\u003d ultimoAlumno - 1; i++) {\n\n        //var nombreAlumno \u003d concatenarNombre(hojaPlanSesion, i, 5);\n        var nombreAlumno \u003d obtenerNombre(hojaPlanSesion, i, 5);\n        var ubicacionAlumno \u003d buscarAlumno(hojaAvance, nombreAlumno);\n\n        if (ubicacionAlumno \u003d\u003d 0) {\n            continue;\n        }\n        else {\n            var listaNotTried \u003d [];\n            var listaAttemptedPassed \u003d [];\n            var listaTercerIntento \u003d [];\n            var etapaActual \u003d hojaAvance[filaAvance][0];\n            var RetosPorRealizar \u003d []; // Todos los retos a realizar de una etapa\n            var RetosPorTerminarMejorar \u003d [];\n            var RetosDebenAlcanzarse \u003d [];\n\n            for (j \u003d filaAvance; j \u003c\u003d etapa_reto + 1; j++) {\n\n                if (etapaActual !\u003d hojaAvance[j][0] || j \u003d\u003d etapa_reto + 1) {\n                    if (RetosPorRealizar.length \u003e 0) {\n                        RetosPorRealizar.unshift(etapaActual);\n                        listaNotTried.push(RetosPorRealizar);\n                        RetosPorRealizar \u003d [];\n                    }\n\n                    if (RetosPorTerminarMejorar.length \u003e 0) {\n                        RetosPorTerminarMejorar.unshift(etapaActual);\n                        listaAttemptedPassed.push(RetosPorTerminarMejorar);\n                        RetosPorTerminarMejorar \u003d [];\n                    }\n\n                    if (RetosDebenAlcanzarse.length \u003e 0) {\n                        RetosDebenAlcanzarse.unshift(etapaActual);\n                        listaTercerIntento.push(RetosDebenAlcanzarse);\n                        RetosDebenAlcanzarse \u003d [];\n                    }\n\n                    etapaActual \u003d hojaAvance[j][0];\n\n                }\n                if (hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link not_tried\") {\n                    RetosPorRealizar.push(hojaAvance[j][1]);\n                }\n\n                else if\n                (\n                    (hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link attempted\" || hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link passed\"\n                      || hojaAvance[j][ubicacionAlumno] \u003d\u003d\"level_link attempted paired\" || hojaAvance[j][ubicacionAlumno] \u003d\u003d\"level_link passed paired\")\n                    \u0026\u0026\n                    (hojaAvance2[j][ubicacionAlumno] \u003d\u003d \"level_link not_tried\")\n                ) {\n                    RetosPorTerminarMejorar.push(hojaAvance[j][1]);\n                }\n\n                else if\n                (\n                    (hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link attempted\" || hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link passed\"\n                      || hojaAvance[j][ubicacionAlumno] \u003d\u003d\"level_link attempted paired\" || hojaAvance[j][ubicacionAlumno] \u003d\u003d\"level_link passed paired\")\n                    \u0026\u0026\n                    (hojaAvance2[j][ubicacionAlumno] \u003d\u003d \"level_link attempted\" || hojaAvance2[j][ubicacionAlumno] \u003d\u003d \"level_link passed\"\n                      || hojaAvance[j][ubicacionAlumno] \u003d\u003d\"level_link attempted paired\" || hojaAvance[j][ubicacionAlumno] \u003d\u003d\"level_link passed paired\")\n                ) {\n                    RetosDebenAlcanzarse.push(hojaAvance[j][1]);\n                }\n                else {\n                    continue;\n                }\n\n            }\n\n            var plan \u003d \"\";\n            if (listaNotTried.length \u003e\u003d 1)\n            {\n              for (k \u003d 0; k \u003c listaNotTried.length; k +\u003d 1) {\n                  plan \u003d plan.concat(\"Etapa \" + listaNotTried[k][0] + \" Retos: \");\n                  for (l \u003d 1; l \u003c listaNotTried[k].length; l +\u003d 1) {\n                      plan \u003d plan.concat(listaNotTried[k][l] + \", \");\n                  }\n              }\n              plan \u003d nombreAlumno + \" Cumbres por alcanzar: \" + plan;\n            }\n            \n            if (listaAttemptedPassed.length \u003e\u003d 1)\n            {\n              plan \u003d plan.concat(\" Cumbres por enfrentar de nuevo:  \");\n              for (k \u003d 0; k \u003c listaAttemptedPassed.length; k +\u003d 1) {\n                  plan \u003d plan.concat(\"Etapa \" + listaAttemptedPassed[k][0] + \" Retos: \");\n                  for (l \u003d 1; l \u003c listaAttemptedPassed[k].length; l +\u003d 1) {\n                      plan \u003d plan.concat(listaAttemptedPassed[k][l] + \", \");\n                  }\n              }\n            }\n            \n            if (listaTercerIntento.length \u003e\u003d 1)\n            {\n              plan \u003d plan.concat(\" Cumbres que finalmente deben ser conquistadas:  \");\n\n              for (k \u003d 0; k \u003c listaTercerIntento.length; k +\u003d 1) {\n                  plan \u003d plan.concat(\"Etapa \" + listaTercerIntento[k][0] + \" Retos: \");\n                  for (l \u003d 1; l \u003c listaTercerIntento[k].length; l +\u003d 1) {\n                      plan \u003d plan.concat(listaTercerIntento[k][l] + \", \");\n                  }\n              }\n            }\n            \n\n\n            var filaRegistroAvance \u003d i + 1;\n            var fr \u003d filaRegistroAvance.toString();\n            var columnaRegistroAvance \u003d \"U\";\n            var celda \u003d columnaRegistroAvance.concat(fr);\n\n            var cell \u003d hojaPlan.getRange(celda);\n            cell.setValue(plan);\n            \n            if (listaTercerIntento.length \u003e 0 \u0026\u0026 idProfesor !\u003d \"\"){\n                Logger.log(\u0027Classroom: \u0027+ nombreAlumno);\n                var idEstudiante \u003d BuscarIdEstudiante(nombreAlumno, estudiantes);\n                Logger.log(\u0027ID \u0027+ nombreAlumno + \u0027 listo\u0027);\n                \n                if (idEstudiante !\u003d \"\"){\n                Logger.log(\u0027Entrando Registrar Mensaje \u0027+ nombreAlumno);\n                RegistrarMensaje(CursoId, idEstudiante, idProfesor, plan);\n                Logger.log(\u0027Saliendo Registrar Mensaje \u0027+ nombreAlumno);\n                }               \n                \n            }\n            Logger.log(\u0027Saliendo If classroom \u0027+ nombreAlumno);\n            \n\n        }\n\n    }\n    //prueba borrar\n    //BorrarMensajes(CursoId,idValeria,estudiantes);\n\n\n}"},{"id":"4f905633-ef4b-4e4b-89ed-b3d89ce93857","name":"Respaldo Plan Original","type":"server_js","source":"// Construir Plan de Sesión\n// Parametro etapa_reto: Numero de fila de la hoja Avance que corresponde\n// a la etapa y reto hasta la que se quiere planificar.\n// Parametro ultimoAlumno: Numero de fila de la hoja Planes de Sesion\n// correspondiente al ultimo alumno a evaluar .\n/*function planSesionPrimeraClase(hojaAvance, hojaPlanSesion, etapa_reto, ultimoAlumno, hojaPlan) {\n\n    // Numero de fila donde comienza a registrarse el avance\n    var filaAvance \u003d 5;\n    // Numero de fila donde comienzan a registrarse los alumnos\n    var filaAlumnos \u003d 4;\n\n    var alumnos \u003d hojaAvance[filaAlumnos];\n\n    // Recorriendo todos los alumnos de la hoja Plan Sesion\n    for (i \u003d 1; i \u003c\u003d ultimoAlumno-1; i++) {\n\n        //var nombreAlumno \u003d concatenarNombre(hojaPlanSesion, i, 5);\n        var nombreAlumno \u003d obtenerNombre(hojaPlanSesion, i, 5);\n        var ubicacionAlumno \u003d buscarAlumno(hojaAvance, nombreAlumno);\n\n        if (ubicacionAlumno \u003d\u003d 0) {\n            continue;\n        }\n        else {\n            var planDeSesion \u003d nombreAlumno + \" Realizar : \";\n\n            var listaAttempted \u003d [];\n            var listaPassed \u003d [];\n            var listaNotTried \u003d [];\n\n            for (j \u003d filaAvance; j \u003c\u003d etapa_reto; j++) {\n\n                if (hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link not_tried\") {\n                    listaNotTried.push(hojaAvance[j][0]);\n                    listaNotTried.push(hojaAvance[j][1]);\n                }\n                else if (hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link attempted\") {\n                    listaAttempted.push(hojaAvance[j][0]);\n                    listaAttempted.push(hojaAvance[j][1]);\n                }\n                else if (hojaAvance[j][ubicacionAlumno] \u003d\u003d \"level_link passed\") {\n                    listaPassed.push(hojaAvance[j][0]);\n                    listaPassed.push(hojaAvance[j][1]);\n                }\n\n            }\n          \n            var plan \u003d nombreAlumno + \" Completar: \";\n  \n          for ( l \u003d 0; l \u003c listaAttempted.length; l+\u003d2){\n            plan \u003d plan.concat(\"E\" + listaAttempted[l] + \"R\" + listaAttempted[l+1] + \" \");\n          }\n          \n          plan \u003d plan.concat(\" Mejorar: \");\n          \n          for ( m \u003d 0; m \u003c listaPassed.length; m+\u003d2){\n            plan \u003d plan.concat(\"E\" + listaPassed[m] + \"R\" + listaPassed[m+1] + \" \");\n          }\n          \n          plan \u003d plan.concat(\" Realizar: \");\n          \n          for ( n \u003d 0; n \u003c listaNotTried.length; n+\u003d2){\n            plan \u003d plan.concat(\"E\" + listaNotTried[n] + \"R\" + listaNotTried[n+1] + \" \");\n          }\n  \n          var filaRegistroAvance \u003d i+1;\n          var fr \u003d filaRegistroAvance.toString();\n          var columnaRegistroAvance \u003d \"AC\";\n          var celda \u003d columnaRegistroAvance.concat(fr);\n                    \n          var cell \u003d hojaPlan.getRange(celda);\n          cell.setValue(plan);\n          //sheetTest[0].getRange(i, 1).setValue( plan );\n            \n        }\n\n    }\n\n\n}\n*/"},{"id":"6e823caa-ef68-4951-853b-d3f2d5163429","name":"MainDosClases","type":"server_js","source":"function main2() {\n\n// ID del documento avance en Google Sheets\nvar id \u003d \"1VIhFC6woy6hGvxBvxW_ZCi86112vFB-zj5ByAlnM25s\";\n// Nombre de la hoja (pestaña de la sesión) que tiene el avance\nvar nombre \u003d \"02-05\";\n// Hoja de Avance\nvar avance \u003d SpreadsheetApp.openById(id).getSheetByName(nombre).getDataRange().getValues();\n\n\n// ID del documento Planes de Ruta, aquí quedará escrito el Plan de Ruta\nvar id2 \u003d \"10AU18ROahOu99Qu04op4PoOnQ8CJ74TdavoQK0qLaNQ\";\n// Nombre de la pestaña del documento de Planes de Ruta donde quedará escrito el Plan de Ruta automático\nvar nombrePs \u003d \"Alumnos\";\n// Hoja de plan de sesión\nvar plan \u003d SpreadsheetApp.openById(id2).getSheetByName(nombrePs).getDataRange().getValues();\nvar hojaPlan \u003d SpreadsheetApp.openById(id2).getSheetByName(nombrePs);\n  \n  // Tercer argumento: fila hoja avance hasta donde se quiere evaluar (Nº fila - 1)\n  // Este tercer argumento hay que ponerlo para que la evaluación sea hasta la próxima sesión \n  // Cuarto argumento: fila del ultimo alumno en la hoja de planes\n  planSesionSegundaClase(avance, plan, 86, 101, hojaPlan);\n   \n}"},{"id":"860f6610-548e-4c6c-9aaa-a09abf209638","name":"MainGeneral","type":"server_js","source":"function main3() {\n\n// ID del documento avance en Google Sheets\nvar id \u003d \"1VIhFC6woy6hGvxBvxW_ZCi86112vFB-zj5ByAlnM25s\";\n\n// Nombre de la hoja (pestaña de la sesión) que tiene el avance\nvar nombre \u003d \"09-05\"; // de esta obtiene el avance\nvar nombre2 \u003d \"04-05\"; // esta es la anterior\n// Hoja de Avance\nvar avance \u003d SpreadsheetApp.openById(id).getSheetByName(nombre).getDataRange().getValues();\nvar avance2 \u003d SpreadsheetApp.openById(id).getSheetByName(nombre2).getDataRange().getValues();\n\n\n// ID del documento Planes de Ruta, aquí quedará escrito el Plan de Ruta\nvar id2 \u003d \"10AU18ROahOu99Qu04op4PoOnQ8CJ74TdavoQK0qLaNQ\";\n// Nombre de la hoja del plan de sesión\nvar nombrePs \u003d \"Alumnos\";\n// Hoja de plan de sesión\nvar plan \u003d SpreadsheetApp.openById(id2).getSheetByName(nombrePs).getDataRange().getValues();\nvar hojaPlan \u003d SpreadsheetApp.openById(id2).getSheetByName(nombrePs);\n\n// Tercer argumento: fila hoja avance hasta donde se quiere evaluar (Nº fila - 1)\n// Este tercer argumento hay que ponerlo para que la evaluación sea hasta la próxima sesión \n// Cuarto argumento: fila del ultimo alumno en la hoja de planes\nplanSesionGeneral(avance, avance2, plan, 98, 101, hojaPlan);\n   \n}"},{"id":"4081bfa3-8c53-472f-bd14-bc2d75ea0eff","name":"GoogleClassroom","type":"server_js","source":"function BuscarIdCurso(nombreCurso) {\n    var response \u003d Classroom.Courses.list();\n    var courses \u003d response.courses;\n    if (courses \u0026\u0026 courses.length \u003e 0) {\n        for (i \u003d 0; i \u003c courses.length; i++) {\n            var course \u003d courses[i];\n            if (course.name.toUpperCase() \u003d\u003d nombreCurso.toUpperCase()) {\n                Logger.log(\u0027%s (%s)\u0027, course.name, course.id);\n                return course.id;\n            }\n        }\n    } else {\n        Logger.log(\u0027No se han encontrado cursos.\u0027);\n        return \"\";\n    }\n}\n\nfunction BuscarIdEstudiante(nombreEstudiante, estudiantes) {\n    //Logger.log(\u0027BuscarIdEstudiante para el alumno: \u0027+ nombreEstudiante);\n    for (k \u003d 0; k \u003c estudiantes.length; k++) {\n        var estudiante \u003d estudiantes[k];\n        if (estudiante.profile.name.fullName \u003d\u003d nombreEstudiante) {\n            Logger.log(nombreEstudiante + \u0027 encontrado en la posicion: \u0027+k);\n            return estudiante.profile.id;\n            Logger.log(\u0027Despues del return BuscarIdEstudiante\u0027);\n            break;\n            Logger.log(\u0027Despues del break BuscarIdEstudiante\u0027);\n        }\n        Logger.log(\u0027Despues comprobar nombre \u0027+nombreEstudiante);\n    }\n    return \"\";\n}\n\nfunction BuscarIdProfesor(nombreProfesor, profesores) {\n    for (i \u003d 0; i \u003c profesores.length; i++) {\n        var profesor \u003d profesores[i];\n        if (profesor.profile.name.fullName.toUpperCase() \u003d\u003d nombreProfesor.toUpperCase()) {\n            return profesor.profile.id;\n        }\n    }\n    return \"\";\n}\n\nfunction RegistrarMensaje(CursoId, idEstudiante, idProfesor, mensajePrivado) {\n    var estudiantes \u003d [idEstudiante];\n    var anuncio \u003d Classroom.newAnnouncement();\n\n    anuncio.courseId \u003d CursoId;\n    anuncio.state \u003d \"PUBLISHED\";\n    anuncio.text \u003d mensajePrivado;\n    anuncio.assigneeMode \u003d \"INDIVIDUAL_STUDENTS\";\n    anuncio.individualStudentsOptions \u003d Classroom.newIndividualStudentsOptions();\n    anuncio.individualStudentsOptions.studentIds \u003d estudiantes;\n    anuncio.creatorUserId \u003d idProfesor;\n\n    Classroom.Courses.Announcements.create(anuncio, CursoId);\n    Logger.log(\u0027Saliendo metodo RegistrarMensaje \u0027+idEstudiante);\n}\n\nfunction BorrarMensajes(CursoId,idValeria,estudiantes) {\n    \n    var idEstudiante \u003d BuscarIdEstudiante(\"Ariadna Alloggia\", estudiantes);\n    var estudiante \u003d [idEstudiante];\n    Logger.log(\u0027Ariadna id \u0027 + idEstudiante);\n    \n    var anuncios \u003d Classroom.Courses.Announcements.list(CursoId).announcements;\n    \n    for (k \u003d 0; k \u003c anuncios.length; k++) {\n        var anuncio \u003d anuncios[k];\n        anuncio.creatorUserId \u003d idValeria;\n        anuncio.state \u003d \"DELETED\";\n        //Classroom.Courses.Announcements.remove(CursoId, anuncio.id);   \n        //Classroom.Courses.Announcements.\n        var estado \u003d {\u0027state\u0027:\u0027DELETED\u0027}\n        var extra \u003d  {\u0027updateMask\u0027:\u0027state\u0027};\n        //Classroom.Courses.Announcements.patch(estado,CursoId,anuncio.id,extra);\n\n        estado \u003d {\u0027studentIds\u0027:\u0027115654079261530942387\u0027};\n        estado \u003d { \u0027studentIds\u0027: \u0027[ 115654079261530942387  ]\u0027};\n        Classroom.Courses.Announcements.modifyAssignees(estado, CursoId, anuncio.id);\n    }\n   \n    Logger.log(\u0027Saliendo metodo BorrarMensaje \u0027 + anuncios.length);\n}\n\nfunction BuscarMensajes(CursoId,idValeria,estudiantes) {\n    \n    var idEstudiante \u003d BuscarIdEstudiante(\"Ariadna Alloggia\", estudiantes);\n    var estudiante \u003d [idEstudiante];\n    Logger.log(\u0027Ariadna id \u0027 + idEstudiante);\n    \n    var anuncios \u003d Classroom.Courses.Announcements.list(CursoId).announcements;\n    \n    for (k \u003d 0; k \u003c anuncios.length; k++) {\n        var anuncio \u003d anuncios[k];\n        Logger.log(\u0027Anuncio:  \u0027 + anuncio.text);\n    }\n   \n    Logger.log(\u0027Saliendo metodo BuscarMensaje \u0027 + anuncios.length);\n}\n\nfunction test(){\n  var CursoId \u003d BuscarIdCurso(\"PES 2018-2019\");\n  var estudiantes \u003d Classroom.Courses.Students.list(CursoId).students;\n  var profesores \u003d Classroom.Courses.Teachers.list(CursoId).teachers;\n  var idEstudiante \u003d BuscarIdEstudiante(\"Beiker Cordoba\", estudiantes);\n  var idProfesor \u003d BuscarIdProfesor(\"Simon Esperanza\", profesores);\n  RegistrarMensaje(CursoId, idEstudiante, idProfesor, \"Cumbres que finalmente deben ser alcanzadas\");\n}"},{"id":"fe013547-a8f0-4f17-a405-22911765a79c","name":"Info","type":"server_js","source":"/*\n\nDOCUMENTACION\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n"},{"id":"dd7cc03c-7d99-41a4-ad2e-a575a7e49e69","name":"MainBuscarMensajes","type":"server_js","source":"function main4() {\n\n\n// ID del documento Mensajes, aquí quedarán escritos los mensajes\nvar id2 \u003d \"1bxBrzuSfdQjiPE8KSy9Nkju75F616HXlLSbyTJAHL0Y\";\n// Nombre de la pestaña del documento de Mensajes donde quedarán escritos los mensajes\nvar nombrePs \u003d \"Hoja 1\";\n\nvar plan \u003d SpreadsheetApp.openById(id2).getSheetByName(nombrePs).getDataRange().getValues();\nvar hojaMensajes \u003d SpreadsheetApp.openById(id2).getSheetByName(nombrePs);\n\nMensajes(plan, hojaMensajes); //80 , 101\n   \n}"},{"id":"3c7f1a51-1cf6-400a-a10a-23a327a8489f","name":"MensajesGo","type":"server_js","source":"// Construir Plan de Sesión\n// Parametro etapa_reto: Numero de fila de la hoja Avance que corresponde\n// a la etapa y reto hasta la que se quiere planificar.\n// Parametro ultimoAlumno: Numero de fila de la hoja Planes de Sesion\n// correspondiente al ultimo alumno a evaluar .\nfunction Mensajes(hojaAvance, hojaPlan) {\n\n  /*\n    Información para Google Classroom\n    */\n    var Curso \u003d \"PFA 2018-2019\";\n    var CursoId \u003d BuscarIdCurso(Curso);\n    var estudiantes \u003d Classroom.Courses.Students.list(CursoId).students;\n    var profesores \u003d Classroom.Courses.Teachers.list(CursoId).teachers;\n    var idProfesor \u003d BuscarIdProfesor(\"Simon Esperanza\", profesores);\n    var idValeria \u003d BuscarIdProfesor(\"Valeria Leon\", profesores);\n\n  //Buscar\n BuscarMensajes(CursoId,idValeria,estudiantes);\n  \n}\n\n"}]}